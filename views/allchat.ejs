<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <title>Socket IO</title>
    <style>

        li {word-break: break-all;}
        body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
  
        #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
        #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
        #input:focus { outline: none; }
        #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }
  
        #messages { list-style-type: none; margin: 0; padding: 0; }
        #messages > li { padding: 0.5rem 1rem; }
        #messages > li:nth-child(odd) { background: #efefef; }

        #messages > li:nth-child(odd):hover { background: #ffe600; transition: 200ms; }
        #messages > li:nth-child(even):hover { background: #ffe600; transition: 200ms; }

      </style>
</head>
<body>
    <!-- Modal -->
    <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModal" aria-hidden="true">
        <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
            <h1 class="modal-title fs-5" id="alertModal">Sorry...</h1>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
        </div>
    </div>

    <div class="container-fluid row">
        <ul id="messages" class="w-100 col"></ul>
        <div class="col position-sticky">
            users
        </div>
        <form id="form" action="" class="container-fluid">
            <input type="file" id="file" class="" />
            <input id="input" autocomplete="off" class="w-100" /> <button>Send</button>
        </form>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        var socket = io();

        const form = document.querySelector('#form');
        const input = document.querySelector('#input');
        const file = document.querySelector('#file');
        const messages = document.querySelector('#messages');
        const modal = new bootstrap.Modal('#alertModal', {})

        form.addEventListener('submit', function(e) {

            e.preventDefault();
            const fileupload = file.files.item(0);
            let thing = {name: null, data: null, type: ''}
            console.log(fileupload);
            if (fileupload!=null) {
                if (fileupload.size > 50000*1000) {
                    document.querySelector('#alertModal .modal-body').innerHTML = `
                    <div> File is to large to upload. . . </div>
                    <div> Max upload: <b>50</b> MB </div>
                    `
                    modal.show()
                    return;
                } else { thing = {name: fileupload.name, data: file.files[0], type: fileupload.type}; }
            }
            if (input.value || fileupload) {
                socket.emit('chat message', input.value, thing, (status)=>{console.log(status)});
                input.value = '';
                file.value = null;
            }
        });

        socket.on('user connected', (user)=>{
            const item = document.createElement('li');
            const nametext = document.createElement('b');
            const content = document.createElement('span');
            const usertext = document.createElement('b');

            usertext.style.color = user.color;
            usertext.textContent = user.username;
            nametext.classList.add('font-monospace');
            nametext.style.color = '#690900';
            nametext.textContent = "[SERVER] HAL-9 : "
            content.textContent = ` has joined.`;

            item.appendChild(nametext);
            item.appendChild(usertext);
            item.appendChild(content);
            messages.appendChild(item);

            window.scrollTo(0, document.body.scrollHeight);
        })

        socket.on('user left', (user)=>{
            const item = document.createElement('li');
            const nametext = document.createElement('b');
            const content = document.createElement('span');
            const usertext = document.createElement('b');

            usertext.style.color = user.color;
            usertext.textContent = user.username;
            nametext.classList.add('font-monospace');
            nametext.style.color = '#690900';
            nametext.textContent = "[SERVER] HAL-9 : "
            content.textContent = ` has left.`;

            item.appendChild(nametext);
            item.appendChild(usertext);
            item.appendChild(content);
            messages.appendChild(item);

            window.scrollTo(0, document.body.scrollHeight);
        })

        socket.on('chat message', (msg, user, f) => {
            const item = document.createElement('li');
            const nametext = document.createElement('b');
            const usericonContainer = document.createElement('div');
            const usericon = document.createElement('img');
            const content = document.createElement('span');

            const uploadcont = document.createElement('div');
            let upload = null;
            if (f.type.includes('image')) {
                upload = document.createElement('img')
            } else if (f.type.includes('video')) {
                upload = document.createElement('video');
            } else {
                upload = document.createElement('a');
            }

            usericonContainer.appendChild(usericon)
            usericonContainer.style.height = "2.5rem"
            usericonContainer.style.width = "2.5rem"
            usericonContainer.style.marginRight = ".5rem"
            usericon.src = "../icons/"+user.pfp;
            usericon.style.height = '100%'
            usericon.style.width = '100%'
            usericon.style.borderRadius = '50px'
            usericon.alt = "pfp"

            item.classList.add("container-fluid");

            if (f.type.includes('image')) {
                upload.style.maxWidth = "100%"; upload.style.maxHeight = "16rem";
                upload.src = '../uploads/chat/'+f.name;
                upload.classList.add('img-fluid');
            } else if (f.type.includes('video')) {
                upload.controls = true;
                upload.style.maxWidth = "100%"; upload.style.maxHeight = "16rem";
                const s = document.createElement('source');
                s.src = document.createElement('source').src = '../uploads/chat/'+f.name;
                s.type = f.type;
                upload.appendChild(s);
            } else {
                upload.innerText = f.name;
                upload.href = '../uploads/chat/'+f.name;
            }

            nametext.style.color = user.color;
            nametext.textContent = user.username+" : "
            content.textContent = msg;

            uploadcont.appendChild(upload)
            item.appendChild(usericonContainer)
            item.appendChild(nametext);
            item.appendChild(content);
            if (f.name!=null) {item.appendChild(uploadcont);}

            messages.appendChild(item);

            window.scrollTo(0, document.body.scrollHeight);
        });
    </script>
</body>
</html>